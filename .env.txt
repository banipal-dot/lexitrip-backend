require('dotenv').config();
const express = require('express');
const Redis = require('ioredis');
const { v4: uuidv4 } = require('uuid');

const app = express();
app.use(express.json());

const redis = new Redis(process.env.REDIS_URL || 'redis://127.0.0.1:6379');
const HOLD_TTL = 600;

app.post('/api/hold', async (req, res) => {
  const { userId, supplier, offerId, supplierPrice } = req.body;
  if (!offerId || !supplierPrice) return res.status(400).json({error:'offerId & supplierPrice required'});
  const holdId = uuidv4();
  const markup = +(supplierPrice * 0.15).toFixed(2);
  const total = Math.ceil(supplierPrice + markup);
  const hold = { holdId, userId, supplier, offerId, supplierPrice, markup, total, status:'HELD', createdAt:Date.now() };
  await redis.set(`hold:${holdId}`, JSON.stringify(hold), 'EX', HOLD_TTL);
  return res.json({ holdId, total, expiresIn: HOLD_TTL });
});

app.post('/api/payment/webhook', async (req, res) => {
  const { holdId, paymentId } = req.body;
  if (!holdId || !paymentId) return res.status(400).json({error:'holdId & paymentId required'});
  const raw = await redis.get(`hold:${holdId}`);
  if (!raw) return res.status(410).json({error:'hold expired'});
  const hold = JSON.parse(raw);
  if (hold.status !== 'HELD') return res.status(409).json({error:'invalid hold state'});
  const bookingRef = `LXT-${Math.floor(Math.random()*900000)+100000}`;
  hold.status = 'BOOKED';
  hold.bookingRef = bookingRef;
  await redis.del(`hold:${holdId}`);
  return res.json({ success:true, bookingRef });
});

app.get('/', (req,res)=>res.send('LexiTrip backend running'));
const PORT = process.env.PORT || 3000;
app.listen(PORT, ()=>console.log(`Server listening on ${PORT}`));
